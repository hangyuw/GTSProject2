{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "project2-ADF"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Flattern Raw data",
						"description": "Flattern Raw data",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"source5": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-data//yelp_academic_dataset_business.json"
							},
							{
								"name": "Destination",
								"value": "sink-data//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "business_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "import1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/business_json')]",
				"[concat(variables('factoryId'), '/datasets/import1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Output Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Json1.json",
						"container": "sink-project2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/business_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "yelp_academic_dataset_business.json",
						"container": "source-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address": {
							"type": "string"
						},
						"city": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"postal_code": {
							"type": "string"
						},
						"latitude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"stars": {
							"type": "number"
						},
						"review_count": {
							"type": "integer"
						},
						"is_open": {
							"type": "integer"
						},
						"attributes": {
							"type": "object",
							"properties": {
								"ByAppointmentOnly": {
									"type": "string"
								},
								"BusinessAcceptsCreditCards": {
									"type": "string"
								},
								"BikeParking": {
									"type": "string"
								},
								"RestaurantsPriceRange2": {
									"type": "string"
								},
								"CoatCheck": {
									"type": "string"
								},
								"RestaurantsTakeOut": {
									"type": "string"
								},
								"RestaurantsDelivery": {
									"type": "string"
								},
								"Caters": {
									"type": "string"
								},
								"WiFi": {
									"type": "string"
								},
								"BusinessParking": {
									"type": "string"
								},
								"WheelchairAccessible": {
									"type": "string"
								},
								"HappyHour": {
									"type": "string"
								},
								"OutdoorSeating": {
									"type": "string"
								},
								"HasTV": {
									"type": "string"
								},
								"RestaurantsReservations": {
									"type": "string"
								},
								"DogsAllowed": {
									"type": "string"
								},
								"Alcohol": {
									"type": "string"
								},
								"GoodForKids": {
									"type": "string"
								},
								"RestaurantsAttire": {
									"type": "string"
								},
								"Ambience": {
									"type": "string"
								},
								"RestaurantsTableService": {
									"type": "string"
								},
								"RestaurantsGoodForGroups": {
									"type": "string"
								},
								"DriveThru": {
									"type": "string"
								},
								"NoiseLevel": {
									"type": "string"
								}
							}
						},
						"categories": {
							"type": "string"
						},
						"hours": {
							"type": "object",
							"properties": {
								"Monday": {
									"type": "string"
								},
								"Tuesday": {
									"type": "string"
								},
								"Wednesday": {
									"type": "string"
								},
								"Thursday": {
									"type": "string"
								},
								"Friday": {
									"type": "string"
								},
								"Saturday": {
									"type": "string"
								},
								"Sunday": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/checkin_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "yelp_academic_dataset_checkin.json",
							"type": "Expression"
						},
						"container": "source-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"date": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Import Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "yelp_academic_dataset_business.json",
						"container": "import-project2"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address": {
							"type": "string"
						},
						"city": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"postal_code": {
							"type": "string"
						},
						"latitude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"stars": {
							"type": "number"
						},
						"review_count": {
							"type": "integer"
						},
						"is_open": {
							"type": "integer"
						},
						"attributes": {
							"type": "object",
							"properties": {
								"ByAppointmentOnly": {
									"type": "string"
								},
								"BusinessAcceptsCreditCards": {
									"type": "string"
								},
								"BikeParking": {
									"type": "string"
								},
								"RestaurantsPriceRange2": {
									"type": "string"
								},
								"CoatCheck": {
									"type": "string"
								},
								"RestaurantsTakeOut": {
									"type": "string"
								},
								"RestaurantsDelivery": {
									"type": "string"
								},
								"Caters": {
									"type": "string"
								},
								"WiFi": {
									"type": "string"
								},
								"BusinessParking": {
									"type": "string"
								},
								"WheelchairAccessible": {
									"type": "string"
								},
								"HappyHour": {
									"type": "string"
								},
								"OutdoorSeating": {
									"type": "string"
								},
								"HasTV": {
									"type": "string"
								},
								"RestaurantsReservations": {
									"type": "string"
								},
								"DogsAllowed": {
									"type": "string"
								},
								"Alcohol": {
									"type": "string"
								},
								"GoodForKids": {
									"type": "string"
								},
								"RestaurantsAttire": {
									"type": "string"
								},
								"Ambience": {
									"type": "string"
								},
								"RestaurantsTableService": {
									"type": "string"
								},
								"RestaurantsGoodForGroups": {
									"type": "string"
								},
								"DriveThru": {
									"type": "string"
								},
								"NoiseLevel": {
									"type": "string"
								}
							}
						},
						"categories": {
							"type": "string"
						},
						"hours": {
							"type": "object",
							"properties": {
								"Monday": {
									"type": "string"
								},
								"Tuesday": {
									"type": "string"
								},
								"Wednesday": {
									"type": "string"
								},
								"Thursday": {
									"type": "string"
								},
								"Friday": {
									"type": "string"
								},
								"Saturday": {
									"type": "string"
								},
								"Sunday": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Import Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "import-project2"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address": {
							"type": "string"
						},
						"city": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"postal_code": {
							"type": "string"
						},
						"latitude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"stars": {
							"type": "number"
						},
						"review_count": {
							"type": "integer"
						},
						"is_open": {
							"type": "integer"
						},
						"attributes": {
							"type": "object",
							"properties": {
								"ByAppointmentOnly": {
									"type": "string"
								},
								"BusinessAcceptsCreditCards": {
									"type": "string"
								},
								"BikeParking": {
									"type": "string"
								},
								"RestaurantsPriceRange2": {
									"type": "string"
								},
								"CoatCheck": {
									"type": "string"
								},
								"RestaurantsTakeOut": {
									"type": "string"
								},
								"RestaurantsDelivery": {
									"type": "string"
								},
								"Caters": {
									"type": "string"
								},
								"WiFi": {
									"type": "string"
								},
								"BusinessParking": {
									"type": "string"
								},
								"WheelchairAccessible": {
									"type": "string"
								},
								"HappyHour": {
									"type": "string"
								},
								"OutdoorSeating": {
									"type": "string"
								},
								"HasTV": {
									"type": "string"
								},
								"RestaurantsReservations": {
									"type": "string"
								},
								"DogsAllowed": {
									"type": "string"
								},
								"Alcohol": {
									"type": "string"
								},
								"GoodForKids": {
									"type": "string"
								},
								"RestaurantsAttire": {
									"type": "string"
								},
								"Ambience": {
									"type": "string"
								},
								"RestaurantsTableService": {
									"type": "string"
								},
								"RestaurantsGoodForGroups": {
									"type": "string"
								},
								"DriveThru": {
									"type": "string"
								},
								"NoiseLevel": {
									"type": "string"
								}
							}
						},
						"categories": {
							"type": "string"
						},
						"hours": {
							"type": "object",
							"properties": {
								"Monday": {
									"type": "string"
								},
								"Tuesday": {
									"type": "string"
								},
								"Wednesday": {
									"type": "string"
								},
								"Thursday": {
									"type": "string"
								},
								"Friday": {
									"type": "string"
								},
								"Saturday": {
									"type": "string"
								},
								"Sunday": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Import Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "import-project2"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address": {
							"type": "string"
						},
						"city": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"postal_code": {
							"type": "string"
						},
						"latitude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"stars": {
							"type": "number"
						},
						"review_count": {
							"type": "integer"
						},
						"is_open": {
							"type": "integer"
						},
						"attributes": {
							"type": "object",
							"properties": {
								"ByAppointmentOnly": {
									"type": "string"
								},
								"BusinessAcceptsCreditCards": {
									"type": "string"
								},
								"BikeParking": {
									"type": "string"
								},
								"RestaurantsPriceRange2": {
									"type": "string"
								},
								"CoatCheck": {
									"type": "string"
								},
								"RestaurantsTakeOut": {
									"type": "string"
								},
								"RestaurantsDelivery": {
									"type": "string"
								},
								"Caters": {
									"type": "string"
								},
								"WiFi": {
									"type": "string"
								},
								"BusinessParking": {
									"type": "string"
								},
								"WheelchairAccessible": {
									"type": "string"
								},
								"HappyHour": {
									"type": "string"
								},
								"OutdoorSeating": {
									"type": "string"
								},
								"HasTV": {
									"type": "string"
								},
								"RestaurantsReservations": {
									"type": "string"
								},
								"DogsAllowed": {
									"type": "string"
								},
								"Alcohol": {
									"type": "string"
								},
								"GoodForKids": {
									"type": "string"
								},
								"RestaurantsAttire": {
									"type": "string"
								},
								"Ambience": {
									"type": "string"
								},
								"RestaurantsTableService": {
									"type": "string"
								},
								"RestaurantsGoodForGroups": {
									"type": "string"
								},
								"DriveThru": {
									"type": "string"
								},
								"NoiseLevel": {
									"type": "string"
								}
							}
						},
						"categories": {
							"type": "string"
						},
						"hours": {
							"type": "object",
							"properties": {
								"Monday": {
									"type": "string"
								},
								"Tuesday": {
									"type": "string"
								},
								"Wednesday": {
									"type": "string"
								},
								"Thursday": {
									"type": "string"
								},
								"Friday": {
									"type": "string"
								},
								"Saturday": {
									"type": "string"
								},
								"Sunday": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Import Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "import-project2"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"business_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"address": {
							"type": "string"
						},
						"city": {
							"type": "string"
						},
						"state": {
							"type": "string"
						},
						"postal_code": {
							"type": "string"
						},
						"latitude": {
							"type": "number"
						},
						"longitude": {
							"type": "number"
						},
						"stars": {
							"type": "number"
						},
						"review_count": {
							"type": "integer"
						},
						"is_open": {
							"type": "integer"
						},
						"attributes": {
							"type": "object",
							"properties": {
								"ByAppointmentOnly": {
									"type": "string"
								},
								"BusinessAcceptsCreditCards": {
									"type": "string"
								},
								"BikeParking": {
									"type": "string"
								},
								"RestaurantsPriceRange2": {
									"type": "string"
								},
								"CoatCheck": {
									"type": "string"
								},
								"RestaurantsTakeOut": {
									"type": "string"
								},
								"RestaurantsDelivery": {
									"type": "string"
								},
								"Caters": {
									"type": "string"
								},
								"WiFi": {
									"type": "string"
								},
								"BusinessParking": {
									"type": "string"
								},
								"WheelchairAccessible": {
									"type": "string"
								},
								"HappyHour": {
									"type": "string"
								},
								"OutdoorSeating": {
									"type": "string"
								},
								"HasTV": {
									"type": "string"
								},
								"RestaurantsReservations": {
									"type": "string"
								},
								"DogsAllowed": {
									"type": "string"
								},
								"Alcohol": {
									"type": "string"
								},
								"GoodForKids": {
									"type": "string"
								},
								"RestaurantsAttire": {
									"type": "string"
								},
								"Ambience": {
									"type": "string"
								},
								"RestaurantsTableService": {
									"type": "string"
								},
								"RestaurantsGoodForGroups": {
									"type": "string"
								},
								"DriveThru": {
									"type": "string"
								},
								"NoiseLevel": {
									"type": "string"
								}
							}
						},
						"categories": {
							"type": "string"
						},
						"hours": {
							"type": "object",
							"properties": {
								"Monday": {
									"type": "string"
								},
								"Tuesday": {
									"type": "string"
								},
								"Wednesday": {
									"type": "string"
								},
								"Thursday": {
									"type": "string"
								},
								"Friday": {
									"type": "string"
								},
								"Saturday": {
									"type": "string"
								},
								"Sunday": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Import Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "import-project2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sink Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "silver_table",
						"container": "sink-project2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/review_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "yelp_academic_dataset_review.json",
							"type": "Expression"
						},
						"container": "source-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"review_id": {
							"type": "string"
						},
						"user_id": {
							"type": "string"
						},
						"business_id": {
							"type": "string"
						},
						"stars": {
							"type": "number"
						},
						"useful": {
							"type": "integer"
						},
						"funny": {
							"type": "integer"
						},
						"cool": {
							"type": "integer"
						},
						"text": {
							"type": "string"
						},
						"date": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tip_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "yelp_academic_dataset_tip.json",
							"type": "Expression"
						},
						"container": "source-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "string"
						},
						"business_id": {
							"type": "string"
						},
						"text": {
							"type": "string"
						},
						"date": {
							"type": "string"
						},
						"compliment_count": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "yelp_academic_dataset_user.json",
							"type": "Expression"
						},
						"container": "source-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"review_count": {
							"type": "integer"
						},
						"yelping_since": {
							"type": "string"
						},
						"useful": {
							"type": "integer"
						},
						"funny": {
							"type": "integer"
						},
						"cool": {
							"type": "integer"
						},
						"elite": {
							"type": "string"
						},
						"friends": {
							"type": "string"
						},
						"fans": {
							"type": "integer"
						},
						"average_stars": {
							"type": "number"
						},
						"compliment_hot": {
							"type": "integer"
						},
						"compliment_more": {
							"type": "integer"
						},
						"compliment_profile": {
							"type": "integer"
						},
						"compliment_cute": {
							"type": "integer"
						},
						"compliment_list": {
							"type": "integer"
						},
						"compliment_note": {
							"type": "integer"
						},
						"compliment_plain": {
							"type": "integer"
						},
						"compliment_cool": {
							"type": "integer"
						},
						"compliment_funny": {
							"type": "integer"
						},
						"compliment_writer": {
							"type": "integer"
						},
						"compliment_photos": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-873121123358116.16.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1:100",
					"newClusterVersion": "10.4.x-scala2.12",
					"clusterOption": "Autoscaling",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "business_json",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "checkin_json",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "review_json",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "tip_json",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "user_json",
								"type": "DatasetReference"
							},
							"name": "source5"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_data",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "flattenAttributes"
						},
						{
							"name": "select2"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          business_id as string,",
						"          name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          postal_code as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          stars as double,",
						"          review_count as integer,",
						"          is_open as integer,",
						"          attributes as (ByAppointmentOnly as string, BusinessAcceptsCreditCards as string, BikeParking as string, RestaurantsPriceRange2 as string, CoatCheck as string, RestaurantsTakeOut as string, RestaurantsDelivery as string, Caters as string, WiFi as string, BusinessParking as string, WheelchairAccessible as string, HappyHour as string, OutdoorSeating as string, HasTV as string, RestaurantsReservations as string, DogsAllowed as string, Alcohol as string, GoodForKids as string, RestaurantsAttire as string, Ambience as string, RestaurantsTableService as string, RestaurantsGoodForGroups as string, DriveThru as string, NoiseLevel as string),",
						"          categories as string,",
						"          hours as (Monday as string, Tuesday as string, Wednesday as string, Thursday as string, Friday as string, Saturday as string, Sunday as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source(output(",
						"          business_id as string,",
						"          date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source2",
						"source(output(",
						"          review_id as string,",
						"          user_id as string,",
						"          business_id as string,",
						"          stars as double,",
						"          useful as integer,",
						"          funny as integer,",
						"          cool as integer,",
						"          text as string,",
						"          date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source3",
						"source(output(",
						"          user_id as string,",
						"          business_id as string,",
						"          text as string,",
						"          date as date,",
						"          compliment_count as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source4",
						"source(output(",
						"          user_id as string,",
						"          name as string,",
						"          review_count as integer,",
						"          yelping_since as date,",
						"          useful as integer,",
						"          funny as integer,",
						"          cool as integer,",
						"          elite as string,",
						"          friends as string,",
						"          fans as integer,",
						"          average_stars as double,",
						"          compliment_hot as integer,",
						"          compliment_more as integer,",
						"          compliment_profile as integer,",
						"          compliment_cute as integer,",
						"          compliment_list as integer,",
						"          compliment_note as integer,",
						"          compliment_plain as integer,",
						"          compliment_cool as integer,",
						"          compliment_funny as integer,",
						"          compliment_writer as integer,",
						"          compliment_photos as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source5",
						"source1 aggregate(groupBy(business_id),",
						"     attributes = collect(attributes),",
						"          hours = collect(hours)) ~> aggregate1",
						"source1 select(mapColumn(",
						"          business_id,",
						"          name,",
						"          address,",
						"          city,",
						"          state,",
						"          postal_code,",
						"          stars,",
						"          review_count,",
						"          categories",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"aggregate1 foldDown(unrollMultiple(attributes,hours),",
						"     mapColumn(",
						"          attributes,",
						"          hours,",
						"          business_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAttributes",
						"flattenAttributes select(mapColumn(",
						"          business_id,",
						"          attributes = attributes.ByAppointmentOnly,",
						"          hours = attributes.BusinessAcceptsCreditCards,",
						"          BikeParking = attributes.RestaurantsTakeOut,",
						"          RestaurantsDelivery = attributes.RestaurantsDelivery,",
						"          DriveThru = attributes.DriveThru,",
						"          OutdoorSeating = attributes.OutdoorSeating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select1 join(select2@business_id == select1@business_id,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, source2 join(select2@business_id == source2@business_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"source5, source4 join(source5@user_id == source4@user_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"select3, source3 join(select3@user_id == source3@user_id,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join3 select(mapColumn(",
						"          user_id = source5@user_id,",
						"          {user name} = name,",
						"          review_count,",
						"          yelping_since,",
						"          average_stars,",
						"          business_id,",
						"          {tip text} = text,",
						"          {tip date} = date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"join4 select(mapColumn(",
						"          {user total reviews} = review_count,",
						"          {user yelping since} = yelping_since,",
						"          {user giving average_stars} = average_stars,",
						"          {tip text},",
						"          {tip date},",
						"          review_id,",
						"          user_id = source3@user_id,",
						"          {user name},",
						"          business_id = source3@business_id,",
						"          {stars user given in review} = stars,",
						"          {review date} = date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select5, select4 join(select5@business_id == select4@business_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join2 select(mapColumn(",
						"          business_id = select1@business_id,",
						"          hours,",
						"          RestaurantsDelivery,",
						"          DriveThru,",
						"          OutdoorSeating,",
						"          name,",
						"          address,",
						"          city,",
						"          state,",
						"          postal_code,",
						"          stars,",
						"          review_count,",
						"          categories",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"join5 select(mapColumn(",
						"          business_id = select5@business_id,",
						"          {business stars} = stars,",
						"          {business reviews count} = review_count,",
						"          {business hours} = hours,",
						"          {business name} = name,",
						"          categories,",
						"          state,",
						"          address,",
						"          city,",
						"          postal_code,",
						"          RestaurantsDelivery,",
						"          DriveThru,",
						"          OutdoorSeating,",
						"          review_id,",
						"          {stars given} = {stars user given in review},",
						"          {review date},",
						"          user_id,",
						"          {user name},",
						"          {user total reviews},",
						"          {user yelping since},",
						"          {user giving average_stars},",
						"          {tip text},",
						"          {tip date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['silver_table'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/business_json')]",
				"[concat(variables('factoryId'), '/datasets/checkin_json')]",
				"[concat(variables('factoryId'), '/datasets/review_json')]",
				"[concat(variables('factoryId'), '/datasets/tip_json')]",
				"[concat(variables('factoryId'), '/datasets/user_json')]",
				"[concat(variables('factoryId'), '/datasets/Output_data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		}
	]
}