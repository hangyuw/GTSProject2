{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "business_json",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          business_id as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          postal_code as string,",
				"          latitude as double,",
				"          longitude as double,",
				"          stars as double,",
				"          review_count as integer,",
				"          is_open as integer,",
				"          attributes as (ByAppointmentOnly as string, BusinessAcceptsCreditCards as string, BikeParking as string, RestaurantsPriceRange2 as string, CoatCheck as string, RestaurantsTakeOut as string, RestaurantsDelivery as string, Caters as string, WiFi as string, BusinessParking as string, WheelchairAccessible as string, HappyHour as string, OutdoorSeating as string, HasTV as string, RestaurantsReservations as string, DogsAllowed as string, Alcohol as string, GoodForKids as string, RestaurantsAttire as string, Ambience as string, RestaurantsTableService as string, RestaurantsGoodForGroups as string, DriveThru as string, NoiseLevel as string),",
				"          categories as string,",
				"          hours as (Monday as string, Tuesday as string, Wednesday as string, Thursday as string, Friday as string, Saturday as string, Sunday as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 aggregate(attributes = collect(attributes),",
				"          hours = collect(hours)) ~> aggregate1",
				"aggregate1 foldDown(unrollMultiple(attributes,hours),",
				"     mapColumn(",
				"          ByAppointmentOnly = attributes.ByAppointmentOnly,",
				"          BusinessAcceptsCreditCards = attributes.BusinessAcceptsCreditCards,",
				"          BikeParking = attributes.BikeParking,",
				"          RestaurantsPriceRange2 = attributes.RestaurantsPriceRange2,",
				"          CoatCheck = attributes.CoatCheck,",
				"          RestaurantsTakeOut = attributes.RestaurantsTakeOut,",
				"          RestaurantsDelivery = attributes.RestaurantsDelivery,",
				"          Caters = attributes.Caters,",
				"          WiFi = attributes.WiFi,",
				"          BusinessParking = attributes.BusinessParking,",
				"          WheelchairAccessible = attributes.WheelchairAccessible,",
				"          HappyHour = attributes.HappyHour,",
				"          OutdoorSeating = attributes.OutdoorSeating,",
				"          HasTV = attributes.HasTV,",
				"          RestaurantsReservations = attributes.RestaurantsReservations,",
				"          DogsAllowed = attributes.DogsAllowed,",
				"          Alcohol = attributes.Alcohol,",
				"          GoodForKids = attributes.GoodForKids,",
				"          RestaurantsAttire = attributes.RestaurantsAttire,",
				"          Ambience = attributes.Ambience,",
				"          RestaurantsTableService = attributes.RestaurantsTableService,",
				"          RestaurantsGoodForGroups = attributes.RestaurantsGoodForGroups,",
				"          DriveThru = attributes.DriveThru,",
				"          NoiseLevel = attributes.NoiseLevel",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"source1 select(mapColumn(",
				"          business_id,",
				"          name,",
				"          address,",
				"          city,",
				"          state,",
				"          postal_code,",
				"          latitude,",
				"          longitude,",
				"          stars,",
				"          review_count,",
				"          is_open,",
				"          categories",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, flatten1 union(byName: true)~> union1"
			]
		}
	}
}