{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "business_json",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "checkin_json",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "review_json",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "tip_json",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "flattenAttributes"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1",
					"description": "right outer join on 'select2' and 'select1'"
				},
				{
					"name": "join2",
					"description": "left outer join on 'join1' and 'source2'"
				},
				{
					"name": "join4"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "join5"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "join6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          business_id as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          postal_code as string,",
				"          latitude as double,",
				"          longitude as double,",
				"          stars as double,",
				"          review_count as integer,",
				"          is_open as integer,",
				"          attributes as (ByAppointmentOnly as string, BusinessAcceptsCreditCards as string, BikeParking as string, RestaurantsPriceRange2 as string, CoatCheck as string, RestaurantsTakeOut as string, RestaurantsDelivery as string, Caters as string, WiFi as string, BusinessParking as string, WheelchairAccessible as string, HappyHour as string, OutdoorSeating as string, HasTV as string, RestaurantsReservations as string, DogsAllowed as string, Alcohol as string, GoodForKids as string, RestaurantsAttire as string, Ambience as string, RestaurantsTableService as string, RestaurantsGoodForGroups as string, DriveThru as string, NoiseLevel as string),",
				"          categories as string,",
				"          hours as (Monday as string, Tuesday as string, Wednesday as string, Thursday as string, Friday as string, Saturday as string, Sunday as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source(output(",
				"          business_id as string,",
				"          date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source2",
				"source(output(",
				"          review_id as string,",
				"          user_id as string,",
				"          business_id as string,",
				"          stars as double,",
				"          useful as integer,",
				"          funny as integer,",
				"          cool as integer,",
				"          text as string,",
				"          date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source3",
				"source(output(",
				"          user_id as string,",
				"          business_id as string,",
				"          text as string,",
				"          date as date,",
				"          compliment_count as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source4",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000) ~> source5",
				"source1 aggregate(groupBy(business_id),",
				"     attributes = collect(attributes),",
				"          hours = collect(hours)) ~> aggregate1",
				"source1 select(mapColumn(",
				"          business_id,",
				"          name,",
				"          address,",
				"          city,",
				"          state,",
				"          postal_code,",
				"          stars,",
				"          review_count,",
				"          categories",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"aggregate1 foldDown(unrollMultiple(attributes,hours),",
				"     mapColumn(",
				"          attributes,",
				"          hours,",
				"          business_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenAttributes",
				"flattenAttributes select(mapColumn(",
				"          business_id,",
				"          attributes = attributes.ByAppointmentOnly,",
				"          hours = attributes.BusinessAcceptsCreditCards,",
				"          BikeParking = attributes.RestaurantsTakeOut,",
				"          RestaurantsDelivery = attributes.RestaurantsDelivery,",
				"          DriveThru = attributes.DriveThru,",
				"          OutdoorSeating = attributes.OutdoorSeating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, select1 join(select2@business_id == select1@business_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source2 join(select2@business_id == source2@business_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select3, source3 join(select3@user_id == source3@user_id,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join6 select(mapColumn(",
				"          user_id = source5@user_id,",
				"          {user name} = name,",
				"          review_count,",
				"          yelping_since,",
				"          average_stars,",
				"          business_id,",
				"          {tip text} = text,",
				"          {tip date} = date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join4 select(mapColumn(",
				"          {user total reviews} = review_count,",
				"          {user yelping since} = yelping_since,",
				"          {user giving average_stars} = average_stars,",
				"          {tip text},",
				"          {tip date},",
				"          review_id,",
				"          user_id,",
				"          {user name},",
				"          business_id,",
				"          {stars user given in review} = stars,",
				"          {review date} = date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select5, select4 join(select5@business_id == select4@business_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join2 select(mapColumn(",
				"          business_id = select1@business_id,",
				"          hours,",
				"          RestaurantsDelivery,",
				"          DriveThru,",
				"          OutdoorSeating,",
				"          name,",
				"          address,",
				"          city,",
				"          state,",
				"          postal_code,",
				"          stars,",
				"          review_count,",
				"          categories",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"join5 select(mapColumn(",
				"          business_id = select5@business_id,",
				"          {business stars} = stars,",
				"          {business reviews count} = review_count,",
				"          {business hours} = hours,",
				"          {business name} = name,",
				"          categories,",
				"          state,",
				"          address,",
				"          city,",
				"          postal_code,",
				"          RestaurantsDelivery,",
				"          DriveThru,",
				"          OutdoorSeating,",
				"          review_id,",
				"          {stars given} = {stars user given in review},",
				"          {review date},",
				"          user_id,",
				"          {user name},",
				"          {user total reviews},",
				"          {user yelping since},",
				"          {user giving average_stars},",
				"          {tip text},",
				"          {tip date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"source5 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"select6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['silver_table'],",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}